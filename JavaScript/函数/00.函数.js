//函数声明:使用function关键字声明一个函数，再指定一个函数名
function f1() {}

//函数表达式:使用function关键字声明一个函数，但未给函数命名，最后将匿名函数赋予一个变量
let f2 = function () {};

//匿名函数 function () {}  使用function关键字声明一个函数，但未给函数命名，所以叫匿名函数;


// 用匿名函数作为一个容器，容器内部可以访问外部的变量，而外部环境不能访问容器内部的变量
//所以内部定义的变量不会和外部的变量发生冲突，俗称匿名包裹器或命名空间,自执行函数（立即执行函数）
(function () { 
    console.log("立即执行函数") 
})(); 
(function () { 
    console.log("立即执行函数")
}())

/**
 立即执行函数和闭包的区别
    立即执行函数和闭包没有关系，虽然两者会经常结合在一起使用，但两者有本质的不同
    立即执行函数 只是函数的一种调用方式，只是声明完之后立即执行，这类函数一般都只是调用一次,调用完之后会立即销毁，不会占用内存
    闭包主要是让外部函数可以访问内部函数的作用域，但因被引用的内部变量不能被销毁，增大了内存消耗，使用不当易造成内存泄露
 */

    
/**
 * 函数声明和函数表达式不同之处在于：
 * 1.调用方式不同：函数声明只能以funName()方式调用，函数表达式后面可以加括号立即调用该函数
 * 2.变量提升-函数声明 ： 函数表达式必须先声明后调用，函数声明可以先调用后声明
 */

/**
 *错误写法： 1.匿名函数+括号  function(){}()
 *      当遇到function关键字时，会默认把它当做是一个函数声明,函数声明需要一个函数名,所以报错;
 * 2.函数声明+括号  function foo(){}()
 *       先声明了一个叫foo的函数，之后进行()内的表达式运算，但是()内的表达式不能为空，所以报错。
 * */